/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType,d:DescriptionType)

.output p1(filename="hw4-1.ans")
.output p1(IO=stdout)

<<<<<<< HEAD
.decl descendant(x:PersonType,y:PersonType)
descendant(x,y) :- parent_child(x,y).
descendant(x,y) :- parent_child(x,z), descendant(z,y).
p1(x,d) :- descendant("Priscilla", x), person(x,d). 

=======
>>>>>>> 51eaf024106546d6cefef7e4ebc93cc2bf5e9914
/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)

.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)

<<<<<<< HEAD
.decl F(x:PersonType,c:number)
F(x,c) :- female(x), c = sum(1) : parent_child(x,_).

.decl M(x:PersonType,c:number)
M(x,c) :- male(x), c = sum(1) : parent_child(x,_).

.decl F_max(m:number)
F_max(m) :- m = max (c) : { F(_,c) }.

.decl M_max(m:number)
M_max(m) :- m = max (c) : { M(_,c) }.

p2(x,d,m) :- person(x,d), F_max(m), F(x,m).
p2(x,d,m) :- person(x,d), M_max(m), M(x,m).

=======
>>>>>>> 51eaf024106546d6cefef7e4ebc93cc2bf5e9914
/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)

.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)

<<<<<<< HEAD
.decl init_g(x:PersonType)
init_g(x) :- person(x,_), !parent_child(_,x).

.decl g(x:PersonType, n:number)
g(x,n) :- init_g(x), parent_child(x,_), n = 0.
g(x,n) :- g(a,b), parent_child(a,x), n = b + 1.
p3(x,m1,m2) :- g(x,_), m1 = min (n) : { g(x,n) }, m2 = max (n) : { g(x,n) }, person_living(x).

=======
>>>>>>> 51eaf024106546d6cefef7e4ebc93cc2bf5e9914
/************* problem 4 **************/
.decl p4(x:PersonType)

.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)

<<<<<<< HEAD
.decl m(p:PersonType, x:PersonType)
m(p,x) :- parent_child(p,x), female(p).
m(p,x) :- m(p,y), parent_child(y,x), female(y).

.decl ml(p:PersonType, y:PersonType)
ml(p,y) :- m(p,y), person_living(y).

.decl lc(p:PersonType, c:number)
lc(p,c) :- ml(p,_), c = count : { ml(p,_) }.

.decl ld(n:number)
ld(d) :- d = count : { person_living(_) }.

p4(x) :- lc(x,c), ld(c).


=======
>>>>>>> 51eaf024106546d6cefef7e4ebc93cc2bf5e9914
/************* problem 5 **************/
.decl p5(x:PersonType)

.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)
<<<<<<< HEAD

.decl m1(x:PersonType, y:PersonType)
m1(x,y) :- p4(x), parent_child(x,y), p4(y).
p5(x) :- p4(x), !m1(x,_).
=======
>>>>>>> 51eaf024106546d6cefef7e4ebc93cc2bf5e9914
